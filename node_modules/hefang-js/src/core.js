"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var type_1 = require("./type");
var guid_1 = require("./hash/guid");
exports.root = global || wx || self || window;
function Symbol(desc) {
    if ("Symbol" in window) {
        return execute(window['Symbol'], desc);
    }
    else {
        return "Symbol" + desc + guid_1.guid();
    }
}
exports.Symbol = Symbol;
/**
 * 空函数
 */
function noop() {
}
exports.noop = noop;
function bindThis(obj) {
    for (var method in obj) {
        if (obj.hasOwnProperty(method))
            obj[method] = obj[method].bind(obj);
    }
}
exports.bindThis = bindThis;
function execute(func) {
    var params = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        params[_i - 1] = arguments[_i];
    }
    return type_1.isFunction(func) ? func.apply(void 0, params) : undefined;
}
exports.execute = execute;
function extend(a, b, c) {
    var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1;
    var length = arguments.length;
    var deep = false;
    // Handle a deep copy situation
    if (typeof target === "boolean") {
        deep = target;
        // Skip the boolean and the target
        target = arguments[i] || {};
        i++;
    }
    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== "object" && !type_1.isFunction(target)) {
        target = {};
    }
    // Extend jQuery itself if only one argument is passed
    if (i === length) {
        target = exports.root["HeFang"];
        i--;
    }
    for (; i < length; i++) {
        // Only deal with non-null/undefined values
        if ((options = arguments[i]) != null) {
            // Extend the base object
            for (name in options) {
                src = target[name];
                copy = options[name];
                // Prevent never-ending loop
                if (target === copy) {
                    continue;
                }
                // Recurse if we're merging plain objects or arrays
                if (deep && copy && (type_1.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                    if (copyIsArray) {
                        copyIsArray = false;
                        clone = src && Array.isArray(src) ? src : [];
                    }
                    else {
                        clone = src && type_1.isPlainObject(src) ? src : {};
                    }
                    // Never move original objects, clone them
                    target[name] = extend(deep, clone, copy);
                    // Don't bring in undefined values
                }
                else if (copy !== undefined) {
                    target[name] = copy;
                }
            }
        }
    }
    // Return the modified object
    return target;
}
exports.extend = extend;
