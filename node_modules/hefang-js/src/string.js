"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function endsWith(string) {
    var search = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        search[_i - 1] = arguments[_i];
    }
    for (var i = 0; i < search.length; i++) {
        if (string.endsWith(search[i]))
            return true;
    }
    return false;
}
exports.endsWith = endsWith;
function startsWith(string) {
    var search = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        search[_i - 1] = arguments[_i];
    }
    for (var i = 0; i < search.length; i++) {
        if (string.startsWith(search[i]))
            return true;
    }
    return false;
}
exports.startsWith = startsWith;
function repeat(string, count) {
    var str = "";
    for (var i = 0; i < count; i++) {
        str += string;
    }
    return str;
}
exports.repeat = repeat;
function padStart(string, targetLength, padChar) {
    if (padChar === void 0) {
        padChar = ' ';
    }
    var s = string + "", pc = padChar + '', padLen = targetLength - s.length;
    if (s.length >= targetLength)
        return s;
    var rt = repeat(pc, Math.ceil((targetLength - s.length) / pc.length)).substr(0, padLen);
    return rt + s;
}
exports.padStart = padStart;
/**
 * 填充字符串结尾
 * @param {string | number} str 要填充的字符串
 * @param {number} targetLength 目标长度
 * @param {string | number} padChar 要填充的字符
 * @returns {string}
 */
function padEnd(str, targetLength, padChar) {
    if (padChar === void 0) { padChar = ' '; }
    var s = str + "", pc = padChar + '', padLen = targetLength - s.length;
    if (s.length >= targetLength)
        return s;
    if (s.length >= targetLength)
        return s;
    return s + (repeat(pc, Math.ceil((targetLength - s.length) / pc.length))).substr(0, padLen);
}
exports.padEnd = padEnd;
function trimLeft(str) {
    if (!str)
        return str;
    if ('trimLeft' in String.prototype) {
        // @ts-ignore
        return String.prototype.trimLeft.call(str);
    }
    return str.replace(/^\s+/, '');
}
exports.trimLeft = trimLeft;
function trimRight(str) {
    if (!str)
        return str;
    if ('trimRight' in String.prototype) {
        // @ts-ignore
        return String.prototype.trimRight.call(str);
    }
    return str.replace(/\s+$/, '');
}
exports.trimRight = trimRight;
function trim(str) {
    if (!str)
        return str;
    if ('trim' in String.prototype) {
        return String.prototype.trim.call(str);
    }
    return str.replace(/(^\s+)|(\s+$)/, '');
}
exports.trim = trim;
