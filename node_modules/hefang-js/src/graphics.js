"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 判断点在不在圆内
 * @param {Point} point 要判断的点
 * @param {Point} center 圆心
 * @param {number} radius 半径
 * @returns {boolean}
 */
function isPointInCircle(point, center, radius) {
    return Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2) <= Math.pow(radius, 2);
}
exports.isPointInCircle = isPointInCircle;
/**
 * 判断点在不在路径内
 * @param {Point} point 要判断的点
 * @param {Point[]} path 要断送的路径点
 * @returns {boolean}
 */
function isPointInPath(point, path) {
    if (!point || !path || path.length < 1)
        return false;
    var xs = [], ys = [];
    for (var i = 0; i < path.length; i++) {
        xs.push(path[i].x);
        ys.push(path[i].y);
    }
    if (point.x < Math.min.apply(Math, xs) || point.x > Math.max.apply(Math, xs) || point.y < Math.min.apply(Math, ys) || point.y > Math.max.apply(Math, ys)) {
        return false;
    }
    var c = false;
    for (var i = 0, j = path.length - 1; i < path.length; j = i++) {
        if (((ys[i] > point.y) != (ys[j] > point.y)) && (point.x < (xs[j] - xs[i]) * (point.y - ys[i]) / (ys[j] - ys[i]) + xs[i]))
            c = !c;
    }
    return c;
}
exports.isPointInPath = isPointInPath;
