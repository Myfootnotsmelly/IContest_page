"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var consts_1 = require("./consts");
/**
 * 判断一个对象是否为基础类型
 * @param obj
 */
function isBasicType(obj) {
    return ["Number", "String", "Boolean"].indexOf(type(obj)) !== -1;
}
exports.isBasicType = isBasicType;
function type(obj) {
    var type = /^\[object (.*?)]$/.exec(consts_1._toString.call(obj))[1];
    return type === "Number" && isNaN(obj) ? "NaN" : type;
}
exports.type = type;
function isNumberic(obj) {
    return obj ? (+obj === +obj) : type(obj) === "Number";
}
exports.isNumberic = isNumberic;
function isFunction(func) {
    return typeof func === "function";
}
exports.isFunction = isFunction;
function isEmptyObject(obj) {
    // noinspection LoopStatementThatDoesntLoopJS
    for (var _ in obj) {
        return false;
    }
    return true;
}
exports.isEmptyObject = isEmptyObject;
function isPlainObject(obj) {
    var proto, Ctor;
    // Detect obvious negatives
    // Use toString instead of jQuery.type to catch host objects
    if (!obj || type(obj) != "Object") {
        return false;
    }
    proto = consts_1.getProto(obj);
    // Objects with no prototype (e.g., `Object.create( null )`) are plain
    if (!proto) {
        return true;
    }
    // Objects with prototype are plain iff they were constructed by a global Object function
    Ctor = consts_1.hasOwn.call(proto, "constructor") && proto.constructor;
    return typeof Ctor === "function" && consts_1.fnToString.call(Ctor) === consts_1.ObjectFunctionString;
}
exports.isPlainObject = isPlainObject;
